
ACTION Cert:  
 
	gMain.Services.Cert.In.Par.CountryCode														:= gPar.Services.Cert.CountryCode;
	gMain.Services.Cert.In.Par.StateProvince													:= gPar.Services.Cert.StateProvince;
	gMain.Services.Cert.In.Par.Locality															:= gPar.Services.Cert.Locality;
	gMain.Services.Cert.In.Par.Organization														:= gPar.Services.Cert.Organization;
	gMain.Services.Cert.In.Par.OrganizationUnit													:= gPar.Services.Cert.OrganizationUnit;
	gMain.Services.Cert.In.Par.ContactEmail														:= gPar.Services.Cert.ContactEmail;
	gMain.Services.Cert.In.Par.CommonName														:= gPar.Services.Cert.CommonName;
	gMain.Services.Cert.In.Par.IP																:= gPar.Services.Cert.IP;

	IF gMain.Services.Cert.In.Cmd.Reset THEN 
		gMain.Services.Cert.In.Cmd.Reset														:= FALSE;
		gMain.Services.Cert.Internal.State														:= CERT_RESET_C;
	END_IF;

	brsmemset(ADR(gMain.Services.Cert.Out),0,SIZEOF(gMain.Services.Cert.Out));
	CASE gMain.Services.Cert.Internal.State OF
		CERT_RESET_C:
			gMain.Services.Cert.Out.Status.CurrentState											:= 'CERT_RESET_C';
			gMain.Services.Cert.Out.Status.InReset												:= TRUE;
			brsmemset(ADR(gMain.Services.Cert.In),0,SIZEOF(gMain.Services.Cert.In));
			brsmemset(ADR(gMain.Services.Cert.Internal),0,SIZEOF(gMain.Services.Cert.Internal));
			gMain.Services.Cert.Internal.State 													:= CERT_CHECKPARREADY_W;
		CERT_CHECKPARREADY_W:
			gMain.Services.Cert.Out.Status.CurrentState											:= 'CERT_CHECKPARREADY_W';
			gMain.Services.Cert.Out.Status.Initializing											:= TRUE;
			gMain.Services.Cert.Internal.CTON_Timeout.IN 										:= TRUE;
			gMain.Services.Cert.Internal.CTON_Timeout.PT 										:= LREAL_TO_TIME(30.0*1000.0); //Hardcoded because parameters are not yet loaded
			IF gMain.Services.Recipes.Out.ParametersReady THEN
				gMain.Services.Cert.Internal.State 												:= CERT_IDLE_I;
			ELSIF gMain.Services.Cert.Internal.CTON_Timeout.Q THEN
				gMain.Services.Cert.Out.Status.Error 											:= TRUE;
				gMain.Services.Cert.Out.ErrorInfo.Severity										:= 1;
				gMain.Services.Cert.Out.ErrorInfo.Text 											:= 'Timeout';
				gMain.Services.Cert.Out.ErrorInfo.State 										:= gMain.Services.Cert.Out.Status.CurrentState;
				gMain.Services.Cert.Internal.State 												:= CERT_ERROR_I;
			END_IF;
		CERT_IDLE_I:
			gMain.Services.Cert.Out.Status.CurrentState											:= 'CERT_IDLE_I';
			gMain.Services.Cert.Out.Status.WaitingForCommand									:= TRUE;
			IF gMain.Services.Cert.SSLConfigIdent = 0 THEN
				gMain.Services.Cert.Internal.State 												:= CERT_GEN_CERT_D;
			END_IF;
		CERT_GEN_CERT_D:
			gMain.Services.Cert.Out.Status.CurrentState											:= 'CERT_GEN_CERT_D';
			gMain.Services.Cert.Out.Status.Processing											:= TRUE;
			gMain.Services.Cert.Internal.CTON_Delay.IN 											:= TRUE;
			gMain.Services.Cert.Internal.CTON_Delay.PT 											:= LREAL_TO_TIME(0.0*1000.0);
			IF gMain.Services.Cert.Internal.CTON_Delay.Q OR 0.0 < 0.0001 THEN
				gMain.Services.Cert.Internal.State 												:= CERT_GEN_CERT_C;
			END_IF;
		CERT_GEN_CERT_C:
			gMain.Services.Cert.Out.Status.CurrentState											:= 'CERT_GEN_CERT_C';
			gMain.Services.Cert.Out.Status.Processing											:= TRUE;
			gMain.Services.Cert.Internal.ArCertGenerateX_0.Execute								:= TRUE;
			gMain.Services.Cert.Internal.ArCertGenerateX_0.Name									:= 'AutoGenerated.cer';
			gMain.Services.Cert.Internal.ArCertGenerateX_0.PrivateKeyName						:= 'AutoGenerated.key';
			gMain.Services.Cert.Internal.ArCertGenerateX_0.CountryCode							:= gMain.Services.Cert.In.Par.CountryCode;
			gMain.Services.Cert.Internal.ArCertGenerateX_0.StateProvince						:= gMain.Services.Cert.In.Par.StateProvince;
			gMain.Services.Cert.Internal.ArCertGenerateX_0.Locality								:= gMain.Services.Cert.In.Par.Locality;
			gMain.Services.Cert.Internal.ArCertGenerateX_0.Organization						   	:= gMain.Services.Cert.In.Par.Organization;
			gMain.Services.Cert.Internal.ArCertGenerateX_0.OrganizationUnit						:= gMain.Services.Cert.In.Par.OrganizationUnit;
			gMain.Services.Cert.Internal.ArCertGenerateX_0.ContactEmail							:= gMain.Services.Cert.In.Par.ContactEmail;
			gMain.Services.Cert.Internal.ArCertGenerateX_0.CommonName							:= gMain.Services.Cert.In.Par.CommonName;
			gMain.Services.Cert.Internal.ArCertGenerateX_0.IP									:= gMain.Services.Cert.In.Par.IP;
			gMain.Services.Cert.Internal.ArCertGenerateX_0.KeySize								:= arCERT_KEY_SIZE_4096_BITS;
			gMain.Services.Cert.Internal.ArCertGenerateX_0.ValidTimeSeconds						:= 365*24*60*60; // 1 year
			gMain.Services.Cert.Internal.ArCertGenerateX_0.DnsName								:= '';
			gMain.Services.Cert.Internal.ArCertGenerateX_0.URI									:= 'urn:';
			TC_brsstrcat(ADR(gMain.Services.Cert.Internal.ArCertGenerateX_0.URI),ADR(gMain.Services.Cert.In.Par.IP),SIZEOF(gMain.Services.Cert.Internal.ArCertGenerateX_0.URI));
			TC_brsstrcat(ADR(gMain.Services.Cert.Internal.ArCertGenerateX_0.URI),ADR('/BR/'),SIZEOF(gMain.Services.Cert.Internal.ArCertGenerateX_0.URI));
			gMain.Services.Cert.Internal.State 													:= CERT_GEN_CERT_W;
		CERT_GEN_CERT_W:
			gMain.Services.Cert.Out.Status.CurrentState											:= 'CERT_GEN_CERT_W';
			gMain.Services.Cert.Out.Status.Processing											:= TRUE;
			gMain.Services.Cert.Internal.CTON_Timeout.IN 										:= TRUE;
			gMain.Services.Cert.Internal.CTON_Timeout.PT 										:= LREAL_TO_TIME(30.0*1000.0);
			IF gMain.Services.Cert.Internal.ArCertGenerateX_0.StatusID = 0 AND gMain.Services.Cert.Internal.ArCertGenerateX_0.Done THEN
				gMain.Services.Cert.Internal.ArCertGenerateX_0.Execute							:= FALSE;
				gMain.Services.Cert.Internal.State 												:= CERT_DELETE_SSL_D;
			ELSIF gMain.Services.Cert.Internal.ArCertGenerateX_0.Error OR (gMain.Services.Cert.Internal.ArCertGenerateX_0.StatusID <> 0 AND gMain.Services.Cert.Internal.ArCertGenerateX_0.StatusID <> 65535 AND gMain.Services.Cert.Internal.ArCertGenerateX_0.StatusID <> 65534) THEN
				gMain.Services.Cert.Internal.ArCertGenerateX_0.Execute							:= FALSE;
				gMain.Services.Cert.Out.Status.Error 											:= TRUE;
				gMain.Services.Cert.Out.ErrorInfo.Severity										:= 2;
				gMain.Services.Cert.Out.ErrorInfo.Code 											:= gMain.Services.Cert.Internal.ArCertGenerateX_0.StatusID;
				gMain.Services.Cert.Out.ErrorInfo.Text 											:= 'FBError';
				gMain.Services.Cert.Internal.State 												:= CERT_ERROR_I;
			ELSIF gMain.Services.Cert.Internal.CTON_Timeout.Q THEN
				gMain.Services.Cert.Internal.ArCertGenerateX_0.Execute							:= FALSE;
				gMain.Services.Cert.Out.Status.Error 											:= TRUE;
				gMain.Services.Cert.Out.ErrorInfo.Severity										:= 2;
				gMain.Services.Cert.Out.ErrorInfo.Text 											:= 'Timeout';
				gMain.Services.Cert.Internal.State 												:= CERT_ERROR_I;
			END_IF;
		CERT_DELETE_SSL_D:
			gMain.Services.Cert.Out.Status.CurrentState											:= 'CERT_DELETE_SSL_D';
			gMain.Services.Cert.Out.Status.Processing											:= TRUE;
			gMain.Services.Cert.Internal.CTON_Delay.IN 											:= TRUE;
			gMain.Services.Cert.Internal.CTON_Delay.PT 											:= LREAL_TO_TIME(0.0*1000.0);
			IF gMain.Services.Cert.Internal.CTON_Delay.Q OR 0.0 < 0.0001 THEN
				gMain.Services.Cert.Internal.State 												:= CERT_DELETE_SSL_C;
			END_IF;
		CERT_DELETE_SSL_C:
			gMain.Services.Cert.Out.Status.CurrentState											:= 'CERT_DELETE_SSL_C';
			gMain.Services.Cert.Out.Status.Processing											:= TRUE;
			gMain.Services.Cert.Internal.ArSslDeleteCfg_0.Execute								:= TRUE;
			gMain.Services.Cert.Internal.ArSslDeleteCfg_0.Name									:= 'AutoGenerated';
			gMain.Services.Cert.Internal.State 													:= CERT_DELETE_SSL_W;
		CERT_DELETE_SSL_W:
			gMain.Services.Cert.Out.Status.CurrentState											:= 'CERT_DELETE_SSL_W';
			gMain.Services.Cert.Out.Status.Processing											:= TRUE;
			gMain.Services.Cert.Internal.CTON_Timeout.IN 										:= TRUE;
			gMain.Services.Cert.Internal.CTON_Timeout.PT 										:= LREAL_TO_TIME(30.0*1000.0);
			IF (gMain.Services.Cert.Internal.ArSslDeleteCfg_0.Done OR gMain.Services.Cert.Internal.ArSslDeleteCfg_0.Error) AND (gMain.Services.Cert.Internal.ArSslDeleteCfg_0.StatusID = 0 OR gMain.Services.Cert.Internal.ArSslDeleteCfg_0.StatusID = arSSL_ERR_SSL_CFG_NOT_FOUND) THEN
				gMain.Services.Cert.Internal.ArSslDeleteCfg_0.Execute							:= FALSE;
				gMain.Services.Cert.Internal.State 												:= CERT_CREATE_SSL_D;
			ELSIF gMain.Services.Cert.Internal.ArSslDeleteCfg_0.Error OR (gMain.Services.Cert.Internal.ArSslDeleteCfg_0.StatusID <> 0 AND gMain.Services.Cert.Internal.ArSslDeleteCfg_0.StatusID <> arSSL_ERR_SSL_CFG_NOT_FOUND AND gMain.Services.Cert.Internal.ArSslDeleteCfg_0.StatusID <> 65535 AND gMain.Services.Cert.Internal.ArSslDeleteCfg_0.StatusID <> 65534) THEN
				gMain.Services.Cert.Internal.ArSslDeleteCfg_0.Execute							:= FALSE;
				gMain.Services.Cert.Out.Status.Error 											:= TRUE;
				gMain.Services.Cert.Out.ErrorInfo.Severity										:= 2;
				gMain.Services.Cert.Out.ErrorInfo.Code 											:= gMain.Services.Cert.Internal.ArSslDeleteCfg_0.StatusID;
				gMain.Services.Cert.Out.ErrorInfo.Text 											:= 'FBError';
				gMain.Services.Cert.Internal.State 												:= CERT_ERROR_I;
			ELSIF gMain.Services.Cert.Internal.CTON_Timeout.Q THEN
				gMain.Services.Cert.Internal.ArSslDeleteCfg_0.Execute							:= FALSE;
				gMain.Services.Cert.Out.Status.Error 											:= TRUE;
				gMain.Services.Cert.Out.ErrorInfo.Severity										:= 2;
				gMain.Services.Cert.Out.ErrorInfo.Text 											:= 'Timeout';
				gMain.Services.Cert.Internal.State 												:= CERT_ERROR_I;
			END_IF;
		CERT_CREATE_SSL_D:
			gMain.Services.Cert.Out.Status.CurrentState											:= 'CERT_CREATE_SSL_D';
			gMain.Services.Cert.Out.Status.Processing											:= TRUE;
			gMain.Services.Cert.Internal.CTON_Delay.IN 											:= TRUE;
			gMain.Services.Cert.Internal.CTON_Delay.PT 											:= LREAL_TO_TIME(0.0*1000.0);
			IF gMain.Services.Cert.Internal.CTON_Delay.Q OR 0.0 < 0.0001 THEN
				gMain.Services.Cert.Internal.State 												:= CERT_CREATE_SSL_C;
			END_IF;
		CERT_CREATE_SSL_C:
			gMain.Services.Cert.Out.Status.CurrentState												:= 'CERT_CREATE_SSL_C';
			gMain.Services.Cert.Out.Status.Processing												:= TRUE;
			gMain.Services.Cert.Internal.ArSslCreateCfg_0.Execute									:= TRUE;
			gMain.Services.Cert.Internal.ArSslCreateCfg_0.Name										:= 'AutoGenerated';
			gMain.Services.Cert.Internal.ArSslCreateCfg_0.Configuration.OwnCertificate.Certificate	:= 'AutoGenerated.cer';
			gMain.Services.Cert.Internal.ArSslCreateCfg_0.Configuration.OwnCertificate.PrivateKey	:= 'AutoGenerated.key';
			gMain.Services.Cert.Internal.ArSslCreateCfg_0.Configuration.OwnCertificate.Password		:= '';
			gMain.Services.Cert.Internal.ArSslCreateCfg_0.Configuration.SslVersion					:= arSSL_TLS_1_2;
			gMain.Services.Cert.Internal.ArSslCreateCfg_0.Configuration.CRLCount					:= 0;
			gMain.Services.Cert.Internal.ArSslCreateCfg_0.Configuration.CRLs						:= 0;
			gMain.Services.Cert.Internal.ArSslCreateCfg_0.Configuration.TrustedCertificateCount		:= 0;
			gMain.Services.Cert.Internal.ArSslCreateCfg_0.Configuration.TrustedCertificates			:= 0;
			gMain.Services.Cert.Internal.State 														:= CERT_CREATE_SSL_W;
		CERT_CREATE_SSL_W:
			gMain.Services.Cert.Out.Status.CurrentState											:= 'CERT_CREATE_SSL_W';
			gMain.Services.Cert.Out.Status.Processing											:= TRUE;
			gMain.Services.Cert.Internal.CTON_Timeout.IN 										:= TRUE;
			gMain.Services.Cert.Internal.CTON_Timeout.PT 										:= LREAL_TO_TIME(30.0*1000.0);
			IF gMain.Services.Cert.Internal.ArSslCreateCfg_0.Done AND gMain.Services.Cert.Internal.ArSslCreateCfg_0.StatusID = 0 THEN
				gMain.Services.Cert.Internal.ArSslCreateCfg_0.Execute							:= FALSE;
				gMain.Services.Cert.Internal.State 												:= CERT_OPEN_SSL_D;
			ELSIF gMain.Services.Cert.Internal.ArSslCreateCfg_0.Error OR (gMain.Services.Cert.Internal.ArSslCreateCfg_0.StatusID <> 0 AND gMain.Services.Cert.Internal.ArSslCreateCfg_0.StatusID <> 65535 AND gMain.Services.Cert.Internal.ArSslCreateCfg_0.StatusID <> 65534) THEN
				gMain.Services.Cert.Internal.ArSslCreateCfg_0.Execute							:= FALSE;
				gMain.Services.Cert.Out.Status.Error 											:= TRUE;
				gMain.Services.Cert.Out.ErrorInfo.Severity										:= 2;
				gMain.Services.Cert.Out.ErrorInfo.Code 											:= gMain.Services.Cert.Internal.ArSslCreateCfg_0.StatusID;
				gMain.Services.Cert.Out.ErrorInfo.Text 											:= 'FBError';
				gMain.Services.Cert.Internal.State 												:= CERT_ERROR_I;
			ELSIF gMain.Services.Cert.Internal.CTON_Timeout.Q THEN
				gMain.Services.Cert.Internal.ArSslCreateCfg_0.Execute							:= FALSE;
				gMain.Services.Cert.Out.Status.Error 											:= TRUE;
				gMain.Services.Cert.Out.ErrorInfo.Severity										:= 2;
				gMain.Services.Cert.Out.ErrorInfo.Text 											:= 'Timeout';
				gMain.Services.Cert.Internal.State 												:= CERT_ERROR_I;
			END_IF;
		CERT_OPEN_SSL_D:
			gMain.Services.Cert.Out.Status.CurrentState											:= 'CERT_OPEN_SSL_D';
			gMain.Services.Cert.Out.Status.Processing											:= TRUE;
			gMain.Services.Cert.Internal.CTON_Delay.IN 											:= TRUE;
			gMain.Services.Cert.Internal.CTON_Delay.PT 											:= LREAL_TO_TIME(0.0*1000.0);
			IF gMain.Services.Cert.Internal.CTON_Delay.Q OR 0.0 < 0.0001 THEN
				gMain.Services.Cert.Internal.State 												:= CERT_OPEN_SSL_C;
			END_IF;
		CERT_OPEN_SSL_C:
			gMain.Services.Cert.Out.Status.CurrentState											:= 'CERT_OPEN_SSL_C';
			gMain.Services.Cert.Out.Status.Processing											:= TRUE;
			gMain.Services.Cert.Internal.ArSslOpen_0.Execute									:= TRUE;
			gMain.Services.Cert.Internal.ArSslOpen_0.Name										:= 'AutoGenerated';
			gMain.Services.Cert.Internal.State 													:= CERT_OPEN_SSL_W;
		CERT_OPEN_SSL_W:
			gMain.Services.Cert.Out.Status.CurrentState											:= 'CERT_OPEN_SSL_W';
			gMain.Services.Cert.Out.Status.Processing											:= TRUE;
			gMain.Services.Cert.Internal.CTON_Timeout.IN 										:= TRUE;
			gMain.Services.Cert.Internal.CTON_Timeout.PT 										:= LREAL_TO_TIME(30.0*1000.0);

			IF gMain.Services.Cert.Internal.ArSslOpen_0.Done AND gMain.Services.Cert.Internal.ArSslOpen_0.StatusID = 0 THEN
				gMain.Services.Cert.Internal.ArSslOpen_0.Execute								:= FALSE;
				gMain.Services.Cert.SSLConfigIdent												:= gMain.Services.Cert.Internal.ArSslOpen_0.Ident;
				gMain.Services.Cert.Internal.State 												:= CERT_IDLE_I;
			ELSIF gMain.Services.Cert.Internal.ArSslOpen_0.Error OR (gMain.Services.Cert.Internal.ArSslOpen_0.StatusID <> 0 AND gMain.Services.Cert.Internal.ArSslOpen_0.StatusID <> 65535 AND gMain.Services.Cert.Internal.ArSslOpen_0.StatusID <> 65534) THEN
				gMain.Services.Cert.Internal.ArSslOpen_0.Execute								:= FALSE;
				gMain.Services.Cert.Out.Status.Error 											:= TRUE;
				gMain.Services.Cert.Out.ErrorInfo.Severity										:= 2;
				gMain.Services.Cert.Out.ErrorInfo.Code 											:= gMain.Services.Cert.Internal.ArSslOpen_0.StatusID;
				gMain.Services.Cert.Out.ErrorInfo.Text 											:= 'FBError';
				gMain.Services.Cert.Internal.State 												:= CERT_ERROR_I;
			ELSIF gMain.Services.Cert.Internal.CTON_Timeout.Q THEN
				gMain.Services.Cert.Internal.ArSslOpen_0.Execute								:= FALSE;
				gMain.Services.Cert.Out.Status.Error 											:= TRUE;
				gMain.Services.Cert.Out.ErrorInfo.Severity										:= 2;
				gMain.Services.Cert.Out.ErrorInfo.Text 											:= 'Timeout';
				gMain.Services.Cert.Internal.State 												:= CERT_ERROR_I;
			END_IF;
		CERT_ERROR_I:
			gMain.Services.Cert.Out.Status.CurrentState											:= 'CERT_ERROR_I';
			gMain.Services.Cert.Out.Status.InError 												:= TRUE;
			gMain.Services.Cert.SSLConfigIdent													:= 0;
			IF gMain.ErrorReset THEN
				gMain.Services.Cert.Internal.State 												:= CERT_RESET_C;					
			END_IF;
	END_CASE;	
	//Check for Commands that are still true. If they are still true then they were not handled and we need to error.
	brsmemset(ADR(gMain.Services.Cert.Internal.BlankCmdCmp),0,SIZEOF(gMain.Services.Cert.Internal.BlankCmdCmp));
	IF brsmemcmp(ADR(gMain.Services.Cert.Internal.BlankCmdCmp),ADR(gMain.Services.Cert.In.Cmd),SIZEOF(gMain.Services.Cert.In.Cmd)) <> 0 THEN
		gMain.Services.Cert.Out.ErrorInfo.State												:= gMain.Services.Cert.Out.Status.CurrentState;

		gMain.Services.Cert.Internal.tempAlarm.name											:= 'CertUnhandledCmd';
		gMain.Services.Cert.Internal.tempAlarm.allowMultiple									:= TRUE;
		gMain.Services.Cert.Internal.tempAlarm.addText[0]										:= gMain.Services.Cert.Out.ErrorInfo.State;
		TC_Array_AddTop(ADR(gMain.Services.Alarms.In.AlarmList), SIZEOF(gMain.Services.Alarms.In.AlarmList), ADR(gMain.Services.Cert.Internal.tempAlarm), SIZEOF(gMain.Services.Cert.Internal.tempAlarm));
	END_IF;
	brsmemset(ADR(gMain.Services.Cert.In.Cmd),0,SIZEOF(gMain.Services.Cert.In.Cmd));
	
	//Reset Timeout On State Change
	IF gMain.Services.Cert.Internal.LastState <> gMain.Services.Cert.Internal.State OR gMain.Services.Cert.Internal.State = CERT_RESET_C THEN
		gMain.Services.Cert.Internal.LastState													:= gMain.Services.Cert.Internal.State;
		gMain.Services.Cert.Internal.CTON_Timeout.IN											:= FALSE;
		gMain.Services.Cert.Internal.CTON_Delay.IN												:= FALSE;
	END_IF;
		
	//Function Calls
	gMain.Services.Cert.Internal.CTON_Timeout(PAUSE := FALSE);
	gMain.Services.Cert.Internal.CTON_Delay(PAUSE := FALSE);					
	gMain.Services.Cert.Internal.ArCertGenerateX_0();
	gMain.Services.Cert.Internal.ArSslCreateCfg_0();
	gMain.Services.Cert.Internal.ArSslDeleteCfg_0();
	gMain.Services.Cert.Internal.ArSslOpen_0();

	//Error Collection
	IF gMain.Services.Cert.Out.Status.Error THEN
		IF brsmemcmp(ADR(gMain.Services.Cert.Internal.LastErrorInfo),ADR(gMain.Services.Cert.Out.ErrorInfo),SIZEOF(gMain.Services.Cert.Internal.LastErrorInfo)) <> 0 THEN
			brsmemcpy(ADR(gMain.Services.Cert.Internal.LastErrorInfo),ADR(gMain.Services.Cert.Out.ErrorInfo),SIZEOF(gMain.Services.Cert.Internal.LastErrorInfo));
			CASE gMain.Services.Cert.Out.ErrorInfo.Severity OF
				1:
					gMain.Services.Cert.Internal.tempAlarm.name				:= 'CertSeverity1';
					gMain.Services.Cert.Internal.tempAlarm.allowMultiple		:= TRUE;
					gMain.Services.Cert.Internal.tempAlarm.addText[0]			:= gMain.Services.Cert.Out.ErrorInfo.State;
					gMain.Services.Cert.Internal.tempAlarm.addText[1]			:= gMain.Services.Cert.Out.ErrorInfo.Text;
					
					TC_Array_AddTop(ADR(gMain.Services.Alarms.In.AlarmList), SIZEOF(gMain.Services.Alarms.In.AlarmList), ADR(gMain.Services.Cert.Internal.tempAlarm), SIZEOF(gMain.Services.Cert.Internal.tempAlarm));
				2:
					gMain.Services.Cert.Internal.tempAlarm.name				:= 'CertSeverity2';
					gMain.Services.Cert.Internal.tempAlarm.allowMultiple		:= TRUE;
					gMain.Services.Cert.Internal.tempAlarm.addText[0]			:= gMain.Services.Cert.Out.ErrorInfo.State;
					gMain.Services.Cert.Internal.tempAlarm.addText[1]			:= gMain.Services.Cert.Out.ErrorInfo.Text;
					gMain.Services.Cert.Internal.tempAlarm.addText[2]			:= DINT_TO_STRING(gMain.Services.Cert.Out.ErrorInfo.Code);
					brsitoa(gMain.Services.Cert.Out.ErrorInfo.Code, ADR(gMain.Services.Cert.Internal.tempAlarm.addText[2]));
					
					TC_Array_AddTop(ADR(gMain.Services.Alarms.In.AlarmList), SIZEOF(gMain.Services.Alarms.In.AlarmList), ADR(gMain.Services.Cert.Internal.tempAlarm), SIZEOF(gMain.Services.Cert.Internal.tempAlarm));
				3:
					gMain.Services.Cert.Internal.tempAlarm.name				:= 'CertSeverity3';
					gMain.Services.Cert.Internal.tempAlarm.allowMultiple		:= TRUE;
					gMain.Services.Cert.Internal.tempAlarm.addText[0]			:= gMain.Services.Cert.Out.ErrorInfo.State;
					gMain.Services.Cert.Internal.tempAlarm.addText[1]			:= gMain.Services.Cert.Out.ErrorInfo.Text;
					
					TC_Array_AddTop(ADR(gMain.Services.Alarms.In.AlarmList), SIZEOF(gMain.Services.Alarms.In.AlarmList), ADR(gMain.Services.Cert.Internal.tempAlarm), SIZEOF(gMain.Services.Cert.Internal.tempAlarm));
				4:
					gMain.Services.Cert.Internal.tempAlarm.name				:= 'CertSeverity4';
					gMain.Services.Cert.Internal.tempAlarm.allowMultiple		:= TRUE;
					gMain.Services.Cert.Internal.tempAlarm.addText[0]			:= gMain.Services.Cert.Out.ErrorInfo.State;
					gMain.Services.Cert.Internal.tempAlarm.addText[1]			:= gMain.Services.Cert.Out.ErrorInfo.Text;
					
					TC_Array_AddTop(ADR(gMain.Services.Alarms.In.AlarmList), SIZEOF(gMain.Services.Alarms.In.AlarmList), ADR(gMain.Services.Cert.Internal.tempAlarm), SIZEOF(gMain.Services.Cert.Internal.tempAlarm));
			END_CASE;
		END_IF;
	ELSE
		brsmemset(ADR(gMain.Services.Cert.Internal.LastErrorInfo),0,SIZEOF(gMain.Services.Cert.Internal.LastErrorInfo));
	END_IF;

END_ACTION
